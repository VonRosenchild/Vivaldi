require "assert.vv"

class Base {
  fn set_a(a): self._a = a,
  fn get_i(): self._i
}

class Derived : Base {
  fn init(a, b): {
    self._i = a + b
  },

  fn get_a(): self._a
}

let obj = Derived(1, 2)

assert(obj.type() == Derived,       "obj.type() == Derived")
assert(obj.type().parent() == Base, "obj.type().parent() == Base")
assert(obj.get_i() == obj._i,       "obj.get_i() == obj._i")
assert(obj._i == 3,                 "obj._i == 3")
obj.set_a('foo)
assert(obj.get_a() == 'foo,         "obj.get_a() == 'foo")

obj._pythonesque = nil
assert(obj._pythonesque == nil,     "obj._pythonesque == nil")

fn external_mem(): self.get_a()
obj._external = external_mem
assert(obj._external() == obj._a,   "obj._external == obj._a")

let custom_type = Type(Base)
assert(custom_type.parent() == Base, "custom_type.parent() == Base")
let custom_obj = custom_type()
assert(custom_obj.type() == custom_type, "custom_obj.type() == custom_type")
custom_obj.set_a(3)
assert(custom_obj._a == 3, "custom_obj._a == 3")
