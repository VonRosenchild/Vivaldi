require "assert.vv"

class Base
  fn set_a(a): self._a = a
  fn get_i(): self._i
end

class Derived : Base
  fn init(a, b): do
    self._i = a + b
  end

  fn get_a(): self._a
end

let obj = new Derived(1, 2)

assert(obj.type() == Derived,       "obj.type() == Derived")
assert(obj.type().parent() == Base, "obj.type().parent() == Base")
assert(obj.get_i() == obj._i,       "obj.get_i() == obj._i")
assert(obj._i == 3,                 "obj._i == 3")
obj.set_a('foo)
assert(obj.get_a() == 'foo,         "obj.get_a() == 'foo")

obj._pythonesque = nil
assert(obj._pythonesque == nil,     "obj._pythonesque == nil")

fn external_mem(): self.get_a()
obj._external = external_mem
assert(obj._external() == obj._a,   "obj._external == obj._a")

class Uninstantiable
  fn init(): except nil
end

let instantiated = true
let i = nil
try: new Uninstantiable()
catch e: instantiated = false
assert(!instantiated && i == nil, "returned object from exception in init")

class SelfWrapper
  fn init(): self.a = 5
  fn get_a(): self.a
  fn self_a_getter(): fn (): self.get_a()
end

fn apply(f): f()
let obj = new SelfWrapper()
let five = apply(obj.self_a_getter())
assert(five == 5, "capturing self in lambdas")
